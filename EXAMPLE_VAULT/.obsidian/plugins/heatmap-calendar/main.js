/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => HeatmapCalendar
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  year: new Date().getFullYear(),
  defaultEntryIntensity: 4,
  colors: {
    default: ["#c6e48b", "#7bc96f", "#49af5d", "#2e8840", "#196127"]
  },
  entries: [{ date: "1900-01-01" }]
};
var HeatmapCalendar = class extends import_obsidian.Plugin {
  daysIntoYear(date) {
    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1e3;
  }
  clamp(input, min, max) {
    return input < min ? min : input > max ? max : input;
  }
  map(current, in_min, in_max, out_min, out_max) {
    const mapped = (current - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    return this.clamp(mapped, out_min, out_max);
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      window.renderHeatmapCalendar = (el, calendarData) => {
        var _a, _b, _c, _d, _e;
        const year = (_a = calendarData.year) != null ? _a : this.settings.year;
        const colors = (_b = calendarData.colors) != null ? _b : this.settings.colors;
        const calEntries = (_c = calendarData.entries) != null ? _c : this.settings.entries;
        const intensities = [];
        calEntries.forEach((e) => {
          if (e.intensity) {
            intensities.push(e.intensity);
          }
        });
        const minimumIntensity = (_d = Math.min(...intensities)) != null ? _d : 1;
        const maximumIntensity = (_e = Math.max(...intensities)) != null ? _e : 5;
        const mappedEntries = [];
        calEntries.forEach((e) => {
          var _a2;
          if (new Date(e.date).getFullYear() == year) {
            const newEntry = __spreadValues({}, e);
            newEntry.intensity = (_a2 = e.intensity) != null ? _a2 : this.settings.defaultEntryIntensity;
            if (minimumIntensity == maximumIntensity) {
              newEntry.intensity = 5;
            } else {
              newEntry.intensity = Math.round(this.map(newEntry.intensity, minimumIntensity, maximumIntensity, 1, 5));
            }
            mappedEntries[this.daysIntoYear(new Date(e.date))] = newEntry;
          }
        });
        const firstDayOfYear = new Date(Date.UTC(year, 0, 1));
        let numberOfEmptyDaysBeforeYearBegins = (firstDayOfYear.getDay() + 5) % 6;
        let boxes = "";
        while (numberOfEmptyDaysBeforeYearBegins) {
          boxes += `<li style="background-color: transparent"></li>`;
          numberOfEmptyDaysBeforeYearBegins--;
        }
        const lastDayOfYear = new Date(Date.UTC(year, 11, 31));
        const numberOfDays = this.daysIntoYear(lastDayOfYear);
        for (let day = 1; day <= numberOfDays; day++) {
          let background_color, content = "";
          if (mappedEntries[day]) {
            if (mappedEntries[day].color) {
              background_color = colors[mappedEntries[day].color][mappedEntries[day].intensity - 1];
            } else {
              background_color = colors[Object.keys(colors)[0]][mappedEntries[day].intensity - 1];
            }
            if (mappedEntries[day].content) {
              content = mappedEntries[day].content;
            }
            boxes += `<li style="background-color:${background_color};">${content}</li>`;
          } else {
            boxes += `<li></li>`;
          }
        }
        const html = `
				<div class="heatmap-calendar-graph">
				<div class="heatmap-calendar-year">${String(year).slice(2)}</div>
				<ul class="heatmap-calendar-months">
					<li>Jan</li>
					<li>Feb</li>
					<li>Mar</li>
					<li>Apr</li>
					<li>May</li>
					<li>Jun</li>
					<li>Jul</li>
					<li>Aug</li>
					<li>Sep</li>
					<li>Oct</li>
					<li>Nov</li>
					<li>Dec</li>
				</ul>
				<ul class="heatmap-calendar-days">
					<li>Mon</li>
					<li>Tue</li>
					<li>Wed</li>
					<li>Thu</li>
					<li>Fri</li>
					<li>Sat</li>
					<li>Sun</li>
				</ul>
				<ul class="heatmap-calendar-boxes">
					${boxes}
				</ul>
				</div>
			`;
        el.insertAdjacentHTML("beforeend", html);
      };
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
